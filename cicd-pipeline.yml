name: Build and Deploy to ECR/ECS
on:
  push:
    branches:
      - main

env:
  AWS_REGION: us-west-1
  ECR_REPOSITORY: "728413774894.dkr.ecr.us-west-1.amazonaws.com/spring"
  ECS_CLUSTER: "dev-cluster"
  ECS_SERVICE: "dev-spring-service-svc"
  CONTAINER_NAME: "dev-spring-service-svc"
  TASK_FAMILY: "dev-spring-service-td"

jobs:
  deploy:
    name: Publish Image and Update ECS
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Get short commit SHA
        id: vars
        run: echo "::set-output name=short_sha::${GITHUB_SHA:0:6}"

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2
      
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      
      - name: Build, tag, and push image to Amazon ECR
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./Dockerfile
          platforms: linux/arm64
          push: true
          tags: |
            ${{ steps.login-ecr.outputs.registry }}/${{ env.ECR_REPOSITORY }}:${{ steps.vars.outputs.short_sha }}
            ${{ steps.login-ecr.outputs.registry }}/${{ env.ECR_REPOSITORY }}:latest
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Get current task definition
        run: |
          aws ecs describe-task-definition \
            --task-definition ${{ env.TASK_FAMILY }} \
            --query 'taskDefinition' > task-definition.json

      - name: Update task definition
        id: task-def
        run: |
          # Update image in task definition
          jq --arg IMAGE "${{ steps.login-ecr.outputs.registry }}/${{ env.ECR_REPOSITORY }}:${{ steps.vars.outputs.short_sha }}" \
            '.containerDefinitions[0].image = $IMAGE' task-definition.json > temp.json && mv temp.json task-definition.json

          # Remove fields that should not be included in register-task-definition
          jq 'del(.taskDefinitionArn, .revision, .status, .requiresAttributes, .compatibilities, .registeredAt, .registeredBy)' \
            task-definition.json > cleaned-task-def.json

          # Register new task definition
          NEW_TASK_DEF_ARN=$(aws ecs register-task-definition \
            --cli-input-json "file://cleaned-task-def.json" \
            --query 'taskDefinition.taskDefinitionArn' \
            --output text)
          
          echo "::set-output name=task_definition_arn::$NEW_TASK_DEF_ARN"

      - name: Update ECS service
        run: |
          aws ecs update-service \
            --cluster ${{ env.ECS_CLUSTER }} \
            --service ${{ env.ECS_SERVICE }} \
            --task-definition ${{ steps.task-def.outputs.task_definition_arn }} \
            --force-new-deployment

      - name: Clean up old task definitions
        run: |
          # Get list of all task definition ARNs for the family
          TASK_DEFS=$(aws ecs list-task-definitions \
            --family-prefix ${{ env.TASK_FAMILY }} \
            --sort DESC \
            --query 'taskDefinitionArns[1:]' \
            --output json)
          
          # Deregister old task definitions
          echo $TASK_DEFS | jq -r '.[]' | while read arn; do
            aws ecs deregister-task-definition \
              --task-definition $arn \
              --query 'taskDefinition.taskDefinitionArn' \
              --output text
          done

